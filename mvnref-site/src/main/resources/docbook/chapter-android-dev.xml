<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.sonatype.com/tmp/docbook/xml/4.5/docbookx.dtd">
<chapter id="android-dev">
  <title>Android Application Development with Maven</title>

  <section id="android-dev-sect-intro">
    <title>Introduction</title>

    <para>Android is a mobile phone and embedded device operating system
    developed by the Open Handset Alliance. It is based on a Linux kernel with
    a virtual machine environment for managed application code using Java
    bytecode for the runtime code generation. The development environment is
    based on the Java language and JVM/JDK based tooling. The generated Java
    bytecode is transformed into Dalvik executable code optimized for
    constrained devices. Java is the default programming language and the
    API's are all Java based.</para>

    <para>In most cases, development of Android applications is done within
    the Eclipse based Android Development Toolkit ADT. The optionally
    generated Apache Ant based build can be used to build applications outside
    the IDE. The Maven Android Plugin was created to allow development teams
    to build, deploy and release Android applications with Apache Maven,
    taking advantage of all the powerful features available like dependency
    management, reporting, code analysis and much more.</para>
  </section>

  <section id="android-dev-sect-config-build">
    <title>Configuring Build Environment for Android Development</title>

    <para><indexterm>
        <primary>Android</primary>
        <secondary>configuring build environment</secondary>
      </indexterm>Before you attempt to build your Android libraries and
    applications with Maven, you will need to complete the following
    configuration tasks:</para>

    <itemizedlist>
      <listitem>
        <para>Install the Android SDK</para>
      </listitem>

      <listitem>
        <para>Configure Maven for simplified usage of the Maven Android Plugin</para>
      </listitem>

      <listitem>
        <para>Optionally install the Android Maps API jar files into a local or remote Maven
        repository</para>
      </listitem>

    </itemizedlist>

    <section id="android-dev-sect-sdk-install">
      <title>Installing the Android SDK</title>

      <para>The Maven Android Plugin requires the presence of the Android SDK
      in your development environment. The <varname>ANDROID_HOME</varname>
      environment variable should be configured to point to the installation
      directory of the Android SDK. The SDK should be installed following the
      directions on the Android Developer web site at
      <uri>http://developer.android.com/sdk/index.html</uri>. For example if
      the SDK is installed in /opt/android-sdk-linux this can be achieved with
      <programlisting>export ANDROID_HOME=/opt/android-sdk-linux</programlisting>on
      a Unix/bash based system or <programlisting>set ANDROID_HOME=C:\\opt\android-sdk-linux</programlisting>on
      a Windows system.</para>

      <para>In addition to the SDK, the various platform versions you need for
      development should also be installed. Instructions for this process are
      located at
      <uri>http://developer.android.com/sdk/adding-components.html</uri>. You
      can install a subset of available platforms or simply install all
      available versions. Optionally, the path
      <varname>ANDROID_HOME/tools</varname> can be added to the PATH variable
      to allow easy command line execution of the various tools provided with
      the SDK.</para>
    </section>

    <section id="android-dev-sect-plugin-config">
      <title>Configuring Maven for usage of the Maven Android Plugin</title>

      <para>In order to use the Maven Android Plugin goals on the command line
      with the short plugin name <varname>android</varname>, you have to add
      the following <varname>pluginGroups</varname> snippet to your
      <varname>settings.xml</varname> file.</para>

      <example>
        <title>Snippet for settings.xml to enable short plugin name
        usage</title>

        <programlisting>&lt;pluginGroups&gt;
   &lt;pluginGroup&gt;
     com.jayway.maven.plugins.android.generation2
   &lt;/pluginGroup&gt;
&lt;/pluginGroups&gt;        </programlisting>
      </example>
    </section>

    <section id="android-dev-sect-repository-install">
        <title>Android Maps artifact install into Maven repository</title>

        <para>The Android artifacts necessary for building standard Android applications are available in the
            Maven central repository. These artifacts were built from the Android open source code base.
        </para>
        <para>
            If you are planning to use the Google Maps API or if you decide to use the android jar artifacts as shipped
            with the SDK, you will need to provide these jar files to Maven in a repository. The Maven Android SDK
            Deployer tool allows you to do that for a single machine in a local repository as well as for any number of
            machines in a remote repository server.
        </para>

        <para>The Maven Android SDK Deployer tool is available for download
        at:</para>

        <para><uri>http://github.com/mosabua/maven-android-sdk-deployer</uri></para>

        <para>Simply click on the <varname>Download Source</varname> button and
        extract the downloaded zip or tar archive in a folder of your choice. A
        folder with a naming pattern of mosabua-maven-android-sdk-deployer-XXX
        with XXX being a revision number like df824df will be created. Change
        directories to this new maven-android-sdk directory: <programlisting>cd mosabua-maven-android-sdk-deployer-df824df</programlisting></para>

        <section id="android-dev-sect-repository-install-local">
          <title>Installation to local repository</title>

          <para>In order to install the jar files from the different
          platform revisions into your local repository you run the command in
          the deployer folder.<programlisting>mvn clean install</programlisting>By
          default this will install all android.jar and maps.jar files into your
          local Maven repository. You should find all newly installed files in
          the <varname>android</varname> and
          <varname>com.google.android.maps</varname> group identifiers under
          <filename>~/.m2/repository</filename>.</para>
        </section>

        <section id="android-dev-sect-repository-install-remote">
          <title>Installation to remote repository</title>

          <para>The above deployment works fine for one machine, but if you need
          to supply a whole team of developers and a cluster of build machines
          with the artifacts, you will want to deploy the artifacts once to a
          remote repository server that is available to all users. If you are
          not currently using a repository manager, you should download Nexus
          and configure a user with permission to deploy artifacts to a
          repository. To get started with Nexus, read the <ulink
          url="http://www.sonatype.com/books/nexus-book/reference/install.html">Nexus
          Installation chapter</ulink> in the free, online Nexus book.</para>

          <para>As a first step you will need to edit the
          <varname>repo.url</varname> property in the pom.xml in the top folder
          of the Maven Android SDK Deployer tool to point to the repository you
          want to publish to. Then you need to add a server with the correct
          access credentials for the server to your Maven Settings file
          (<filename>~/.m2/settings.xml</filename>). <example>
              <title>Snippet for settings.xml for the repository server access
              credentials</title>

              <programlisting>&lt;settings&gt;
      &lt;servers&gt;
          &lt;server&gt;
              &lt;id&gt;android.repo&lt;/id&gt;
              &lt;username&gt;your username&lt;/username&gt;
              &lt;password&gt;your password&lt;/password&gt;
          &lt;/server&gt;
      &lt;/servers&gt;
  &lt;/settings&gt;
  </programlisting>
            </example>Once that configuration is completed you can deploy the
          artifacts with the command <command>mvn deploy</command>. As a result
          you should find the artifact in the repository of your remote server.
          </para>
        </section>

        <section id="android-dev-sect-repository-install-parts">
          <title>Installation of a subset of all platforms</title>

          <para>By default the Maven Android SDK Deployer tool will attempt to
          install or deploy all versions of the platforms artifacts into a
          repository. If you decide to only install a subset of the components
          the tool can be used with profile options to only install or deploy
          some artifacts. This can be done by specifying the platform API
          versions as a profile name: <programlisting>mvn install -P 2.2</programlisting>Available
          profile names are <varname>1.5</varname>,
          <varname>1.6</varname>, <varname>2.1</varname> and
          <varname>2.2</varname>.</para>
        </section>
      </section>

  </section>

  <section id="android-dev-sect-using">
    <title>Android Application Development with the Maven Android
    Plugin</title>

    <section id="android-dev-sect-helloandroidexample">
      <title>HelloFlashlight Example</title>

      <para>The HelloFlashlight example application serves as a starting point
      to introduce you to the usage of the Maven Android Plugin. You can
      follow the same steps to introduce an Maven Android Plugin based build
      to your Android application. After the initial environment setup
      documented above, the Android Development Tools from
      <uri>http://developer.android.com/sdk/eclipse-adt.html</uri> were
      installed and used to create a new Android project.</para>

      <para>To enable a Maven based build of the project the following pom.xml
      file was added in the root folder of the project:</para>

      <example>
        <title>The HelloFlashlight pom.xml file</title>

        <programlisting>  &lt;?xml version="1.0" encoding="UTF-8"?&gt;
  &lt;project xmlns="http://maven.apache.org/POM/4.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                               http://maven.apache.org/maven-v4_0_0.xsd"&gt;
      &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
      &lt;groupId&gt;com.simpligility.android&lt;/groupId&gt;
      &lt;artifactId&gt;helloflashlight&lt;/artifactId&gt;
      &lt;version&gt;0.1-SNAPSHOT&lt;/version&gt;
      &lt;packaging&gt;apk&lt;/packaging&gt;
      &lt;name&gt;HelloFlashlight&lt;/name&gt;

      &lt;dependencies&gt;
          &lt;dependency&gt;
              &lt;groupId&gt;com.google.android&lt;/groupId&gt;
              &lt;artifactId&gt;android&lt;/artifactId&gt;
              &lt;version&gt;2.1_r1&lt;/version&gt;
              &lt;scope&gt;provided&lt;/scope&gt;
          &lt;/dependency&gt;
      &lt;/dependencies&gt;

      &lt;build&gt;
          &lt;sourceDirectory&gt;src&lt;/sourceDirectory&gt;
          &lt;plugins&gt;
              &lt;plugin&gt;
                  &lt;groupId&gt;
                    com.jayway.maven.plugins.android.generation2
                  &lt;/groupId&gt;
                  &lt;artifactId&gt;maven-android-plugin&lt;/artifactId&gt;
                  &lt;version&gt;2.5.0&lt;/version&gt;
                  &lt;configuration&gt;
                      &lt;sdk&gt;
                          &lt;platform&gt;4&lt;/platform&gt;
                      &lt;/sdk&gt;
                      &lt;deleteConflictingFiles&gt;
                        true
                      &lt;/deleteConflictingFiles&gt;
                  &lt;/configuration&gt;
                  &lt;extensions&gt;true&lt;/extensions&gt;
              &lt;/plugin&gt;
              &lt;plugin&gt;
                  &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                  &lt;version&gt;2.3&lt;/version&gt;
              &lt;/plugin&gt;
          &lt;/plugins&gt;
      &lt;/build&gt;
  &lt;/project&gt;
        </programlisting>
      </example>

      <para>The highlights of this pom.xml are: <itemizedlist>
          <listitem>
            <para>the <varname>packaging</varname> type of
            <varname>apk</varname></para>
          </listitem>

          <listitem>
            <para>the dependency to the Android platform jar</para>
          </listitem>

          <listitem>
            <para>and the build configuration with the Maven Android Plugin
            and the Compiler Plugin</para>
          </listitem>
        </itemizedlist></para>

      <para>The Android Package <varname>packaging</varname> type
      <varname>apk</varname> is what activates the Android-specific lifecycle
      modifications of the Maven Android Plugin. It takes care of all the
      specific calls to the Android SDK tools, that process resources, convert
      Java bytecode and so on.</para>

        <para>The declared dependency to the android platform jar uses the version of the target platform as published
            into the Maven central repository. Browse the central repository to see which versions are available. When
            using the artifacts as deployed by the Maven Android SDK Deployer, simply browse the android folder of your
            maven repository/repository server to see what the exact versions are. It is important to note that the
            <varname>scope</varname>
            of the dependency is declared as provided. This is necessary since we do not want this dependency to be
            included into our application package. We just need the classes to be available at compile time. The android
            jar as well as the Google maps jar files actually contain only empty stubs of all classes with all methods
            throwing exceptions. As such only execution on the emulator and the device where the actual implementations
            are available is possible.
        </para>

      <para>The configuration of the Maven Compiler Plugin in the build is
      necessary since Android uses Java 5 language specification code with
      annotations, foreach loop and so on and the Java compiler needs to know
      that. The default of the Maven Compiler Plugin version 2.3 and higher is set to use Java 1.5, whereas earlier
      versions are not.</para>

        <para>The main configuration of the Maven Android Plugin is done in the build section, but out of the box only
            limited configuration is necessary.
        </para>

        <para>To build the application and run it on an already started emulator you could use
            <programlisting>mvn clean install android:deploy</programlisting>. The code for the example application is
            available as part of the maven-android-plugin-samples available at
            <uri>http://code.google.com/p/maven-android-plugin/wiki/Samples</uri>.
        </para>
    </section>

    <section id="android-dev-sect-test">
      <title>Testing Android Application Code</title>

      <para>Testing Android Application code can be done in a unit test
      fashion with rich junit support as part of the Android SDK as well as
      integration type testing called instrumentation testing.</para>

      <section id="android-dev-sect-test-unit">
        <title>Unit tests</title>

        <para>The Maven Android plugin includes the execution of the Surefire
        plugin and as such unit tests can be included in the project like in
        any other project. The default path for test classes in the Eclipse
        and therefore Android Development Toolkit is <varname>test</varname>
        and therefore Maven has to be configured to access code from there
        with the configuration <example>
            <title>Adding the test folder to the build configuration</title>

            <programlisting>&lt;build&gt;
  &lt;testSourceDirectory&gt;test&lt;/testSourceDirectory&gt;
  ...          </programlisting>
          </example>Alternatively the Maven conventions can be implemented by
        moving the source code for the application and the test source code
        into <varname>src/main/java</varname> and
        <varname>src/test/java</varname> and reconfiguring the Eclipse project
        files. As supported by the Maven Surefire Plugin TestNG as well as JUnit
        can be used as the testing framework by adding the respective dependency to the
        pom.xml like this:

            <example>
                <title>Adding JUnit or TestNG as testing framework</title>
                <programlisting>
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.8.1&lt;/version&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    or
    &lt;dependency&gt;
        &lt;groupId&gt;org.testng&lt;/groupId&gt;
        &lt;artifactId&gt;testng&lt;/artifactId&gt;
        &lt;version&gt;5.11&lt;/version&gt;
        &lt;classifier&gt;jdk15&lt;/classifier&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;android&lt;/groupId&gt;
        &lt;artifactId&gt;android&lt;/artifactId&gt;
        &lt;version&gt;2.2_r1&lt;/version&gt;
        &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;
                </programlisting>
            </example>
        It is important to use the scope test, since the testing framework will otherwise be included in your Android'
            application package. A second important characteristic of this setup is that the dependency to Android is
            after the Junit dependency. This is due to the fact that a stubbed junit is included in the Android jar itself
            for instrumentation testing, when using the artifacts from the SDK. The classes in the actual jar are
            exception throwing shells that will not allow your JUnit tests to run if they are picked up first in the
            classpath by the surefire plugin. This ordering does not apply to TestNG or the artifacts from Maven central,
            but it can be considered a good practice.
        </para>
      </section>

      <section id="android-dev-sect-test-instrumentation">
        <title>Instrumentation tests</title>

          <para>Instrumentation tests are integration tests bundled into an application that run on the emulator or
              device and interact with another deployed application to test the behaviour. A Maven build run therefore
              needs a running emulator or attached device to succeed.The common setup to run instrumentation tests would
              be two parallel projects, one for the application and one for the instrumentation tests. These modules are
              tied together as modules of a parent pom.
          </para>

        <para>The Maven Android Plugin Samples codebase contains two examples
        for a project set up in this manner. The setup of the instrumentation
        test application with the Maven Android Plugin is like an additional separate module with <varname>apk</varname>
            packaging.
        <programlisting>
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.google.android&lt;/groupId&gt;
            &lt;artifactId&gt;android&lt;/artifactId&gt;
            &lt;scope&gt;provided&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.google.android&lt;/groupId&gt;
            &lt;artifactId&gt;android-test&lt;/artifactId&gt;
            &lt;scope&gt;provided&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.simpligility.android.morse&lt;/groupId&gt;
            &lt;artifactId&gt;morseflash-app&lt;/artifactId&gt;
            &lt;version&gt;${project.version}&lt;/version&gt;
            &lt;type&gt;apk&lt;/type&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.simpligility.android.morse&lt;/groupId&gt;
            &lt;artifactId&gt;morseflash-app&lt;/artifactId&gt;
            &lt;version&gt;${project.version}&lt;/version&gt;
            &lt;scope&gt;compile&lt;/scope&gt;
            &lt;type&gt;jar&lt;/type&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;            
    </programlisting></para>

          <para>Looking at the example from the morseflash application the main difference are the dependencies as shown
              above. As usual a dependency to Android has to be added. In addition a dependency to the android-test
              artifact that contains the JUnit extensions, mock implementations and other helpers provided by the Android
              SDK.</para>
          <para>Furthermore a dependency to the application under test with the <varname>type</varname>
        of <varname>apk</varname> is necessary. Optionally a <varname>compile</varname> scoped
              dependency to the jar artifact helps with code completion and more during the development of the
              instrumentation test clases.</para>
      </section>
    </section>

    <section id="android-dev-sect-maps">
      <title>Using Add Ons like the Google Maps Extension</title>

      <para>For many applications the normal Android SDK artifact
      (android.jar) will be sufficient, however some applications require
      add-ons. One of the more commonly used add-ons is the Google Maps add-on
      which provides access to the Google Maps API. The Maps add-on is
      deployed to your Maven repository by the Maven Android SDK Deployer
      tool. In order to access the API in your application you need to add a
      dependency to the add-on to your pom.xml like this:</para>

      <example>
        <title>The dependency to the Google Maps API</title>

        <programlisting>&lt;dependency&gt;
  &lt;groupId&gt;com.google.android.maps&lt;/groupId&gt;
  &lt;artifactId&gt;maps&lt;/artifactId&gt;
  &lt;version&gt;8_r1&lt;/version&gt;
  &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;      </programlisting>
      </example>

      <para>The valid versions currently are <varname>3_r3</varname>,
      <varname>4_r2</varname>,
      <varname>7_r1</varname> and <varname>8_r1</varname>. Simply browse the
      android folder of your maven repository/repository server to see what
      the versions are.</para>
    </section>

    <section id="android-dev-sect-multimodule">
      <title>Multi Module Maven Android Projects</title>

      <para>The Maven Android Plugin can be used in a multi-module project
      setup. An example setup would be 3 different modules linked via a parent
      pom.</para>

      <variablelist>
        <varlistentry>
          <term>Java Library Code</term>

          <listitem>
            <para>This first module could contain any business logic
            implemented in Java, or any other JVM based language actually, in
            a jar package.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Android Application Code</term>

          <listitem>
            <para>This second module would depend on the first module and
            consist of all the interface code for the Android platform. It
            would need to use apk packaging and the Maven Android
            Plugin.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Instrumentation Test</term>

          <listitem>
            <para>This third module would depend on the second module and
            implement the integration test of the application.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Together with the use of other module to separate items it is
      possible to set up a multi module build for an Android application as
      well as a server side web application sharing e.g. the code for the core
      objects and business logic.</para>
    </section>

    <section id="android-dev-sect-dependencies">
      <title>Using external dependencies</title>

      <para>When using the Maven Android plugin there are three types of
      dependencies that are treated differently.</para>

      <variablelist>
        <varlistentry>
          <term>Regular dependencies to other Java libraries</term>

          <listitem>
            <para>The Java byte code files (.class) of library dependencies as
            denoted in the normal Maven way are transformed to dalvik
            executable format like any source code of the current project and
            included in the Android package. All other files are included as
            contained in the source library. An example would look like this
            <programlisting>&lt;dependency&gt;
  &lt;groupId&gt;com.simpligility&lt;/groupId&gt;
  &lt;artifactId&gt;model&lt;/artifactId&gt;
  &lt;version&gt;0.1&lt;/version&gt;
&lt;/dependency&gt;
</programlisting></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Dependencies to other Android projects</term>

          <listitem>
            <para>Other Maven Android projects with packaging type apk
            declared as dependencies are deployed to the emulator prior to
            running the instrumentation tests in the integration test phase.
            <programlisting>&lt;dependency&gt;
  &lt;groupId&gt;com.simpligility.android&lt;/groupId&gt;
  &lt;artifactId&gt;intents&lt;/artifactId&gt;
  &lt;version&gt;0.1&lt;/version&gt;
  &lt;type&gt;apk&lt;/type&gt;
&lt;/dependency&gt;
</programlisting></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Dependencies to other Android projects sources</term>

          <listitem>
            <para>Other Maven Android projects with packaging type apk
            declared as source dependencies are pulled into the current
            Android application with assets and resources and used to build an
            application combining all artifacts.. <programlisting>&lt;dependency&gt;
  &lt;groupId&gt;com.simpligility.android&lt;/groupId&gt;
  &lt;artifactId&gt;tools&lt;/artifactId&gt;
  &lt;version&gt;0.1&lt;/version&gt;
  &lt;type&gt;apksources&lt;/type&gt;
&lt;/dependency&gt;
</programlisting> More details can be found at
            <uri>http://code.google.com/p/maven-android-plugin/wiki/ApkSourcesDependency</uri>.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <!--TODO To we want these sections? -->

    <!--<section id="android-dev-sect-eclipse">-->

    <!--<title>Using the plugin with Eclipse</title>-->

    <!--<para>document what needs to be done, maybe install m2eclipse, more details on the wiki and need to play around with it-->

    <!--same applies for motodev studio, http://code.google.com/p/maven-android-plugin/wiki/EclipseIntegration</para>-->

    <!--</section>-->

    <!--<section id="android-dev-sect-intellij">-->

    <!--<title>Using the plugin with IntelliJ IDEA</title>-->

    <!--<para>need to play around with it</para>-->

    <!--</section>-->
  </section>

  <section id="android-dev-sect-custom-details">
    <title>Maven Android Plugin Details</title>

    <section id="android-dev-sect-custom-lifecycle">
      <title>Maven Android Plugin Lifecycle</title>

      <para><indexterm>
          <primary>Maven Android Plugin</primary>

          <secondary>lifecycle</secondary>
        </indexterm>The Android Maven plugin customizes the lifecycle based on
      the packaging. If your project has a <varname>packaging</varname> of
      type<varname>apk</varname> the Android plugin will execute a customized
      lifecycle.</para>

      <para>The customised life cycle has the following additional executions
      in the default lifecycle.</para>

      <variablelist>
        <varlistentry>
          <term>generate-sources Phase</term>

          <listitem>
            <para>Use the Android Asset Packaging Tool
            (<varname>aapt</varname>) of the platform version specified in the
            pom to package the Android specific resources like
            <varname>AndroidManifest.xml</varname>, assets and
            resources.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>process-classes Phase</term>

          <listitem>
            <para>Run the <varname>dx</varname> tool of the platform version
            specified in the pom to convert all classes (libraries, resources
            and project code) into davlik executable format.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>package Phase</term>

          <listitem>
            <para>Run the Android Package tool (<varname>apk</varname>) of the
            Android SDK to create and sign the Android package file (apk) for
            installation on the emulator or device.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>pre-integration-test Phase</term>

          <listitem>
            <para>Deploy the currently built Android application package (apk)
            as well as any other dependencies with
            <varname>packaging</varname> type <varname>apk</varname> to the
            emulator/device.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>integration-test Phase</term>

          <listitem>
            <para>Run the instrumentation test classes against the deployed
            application.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="android-dev-sect-goals">
      <title>Maven Android Plugin Goals</title>

      <para><indexterm>
          <primary>Maven Android</primary>

          <secondary>plugin goals</secondary>
        </indexterm> The Maven Android Plugin contains the following
      goals:</para>

      <variablelist>
        <varlistentry>
          <term>android:apk</term>

          <listitem>
            <para>The <varname>apk</varname> goal creates the android package
            (apk) file. By default the plugin signs the file with the debug
            keystore. The configuration parameter <programlisting>&lt;sign&gt;&lt;debug&gt;false&lt;debug&gt;&lt;sign&gt;
</programlisting> can be used to disable the signing process.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:deploy</term>

          <listitem>
            <para>The <varname>deploy</varname> goal deploys the built apk
            file, or another specified apk, to a connected device or emulator.
            This goal is automatically performed when running through the
            <varname>integration-test</varname> lifecycle phase on a project
            with instrumentation tests (e.g. <command>mvn install</command> or
            <command>mvn integration-test</command>).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:deploy-dependencies</term>

          <listitem>
            <para>The <varname>deploy-dependencies</varname> goal deploys all
            directly declared dependencies of
            <varname>&lt;type&gt;apk&lt;/type&gt;</varname> in this project.
            This goal is usually used in a project with instrumentation tests,
            to deploy the apk to test onto the device before running the
            deploying and running the instrumentation tests apk. The goal is
            automatically performed when running through the integration-test
            life cycle phase on a project with instrumentation tests (e.g.
            <command>mvn install</command> or <command>mvn
            integration-test</command>).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:dex</term>

          <listitem>
            <para>The <varname>dex</varname> goal converts compiled Java
            classes to the Android Dalivk Executable (dex) format.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:emulator-start</term>

          <listitem>
            <para>The <varname>emulator-start</varname> goal starts the
            Android device emulator. The start up parameters can be configured
            in the Maven Android Plugin configuration in the pom.xml file
            <programlisting>&lt;configuration&gt;
  ...
  &lt;emulator&gt;
    &lt;avd&gt;21&lt;/avd&gt;
    &lt;wait&gt;6000&lt;/wait&gt;
    &lt;options&gt;-no-skin&lt;/options&gt;
  &lt;/emulator&gt;
  ...
&lt;/configuration&gt;               </programlisting> or via command line
            parameters outside an actual project. <programlisting>mvn android:emulator-start \
    -Dandroid.emulator.avd=Default \
    -Dandroid.emulator.options=-no-skin \
    -Dandroid.emulator.wait=10000              </programlisting></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:emulator-stop</term>

          <listitem>
            <para>The <varname>emulator-stops</varname> stops the Android
            device emulator and can be used inside or outside a Maven project
            folder.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:generate-sources</term>

          <listitem>
            <para>The <varname>generate-sources</varname> goal generates
            <varname>R.java</varname> based on the resources specified by the
            resources configuration parameter. It generates Java files based
            on aidl files.</para>

            <para>If the configuration parameter
            <varname>deleteConflictingFiles</varname> is true (which it is by
            default), this goal has also deletes any R.java files found in the
            source directory, deletes any .java files with the same name as an
            .aidl file found in the source directory and deletes any Thumbs.db
            files found in the resource directory.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:instrument</term>

          <listitem>
            <para>The <varname>instrument</varname> goal runs the
            instrumentation android package on the device/emulator.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:internal-integration-test</term>

          <listitem>
            <para>The <varname>internal-integration-test</varname> goal is
            called automatically when the lifecycle reaches the
            <varname>integration-test</varname> phase. It determines whether
            to call the goal instrument in this phase based on the existence
            of instrumentation test classes in the current project. The goal
            is internal to the plugin lifecycle and should not be used as
            separate invocation on the command line.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:internal-pre-integration-test</term>

          <listitem>
            <para>The <varname>internal-pre-integration-test</varname> goal is
            called automatically when the lifecycle reaches
            <varname>pre-integration-test</varname> phase. It determines
            whether to call the goals
            <varname>android:deploy-dependencies</varname> and
            <varname>android:deploy</varname> in this phase and if necessary
            invokes them. The goal is internal to the plugin lifecycle and
            should not be used as separate invocation on the command
            line.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:pull</term>

          <listitem>
            <para>The pull goal can be used to copy files or directories from
            the device. Source and destination file have to be specified with <varname>-Dandroid.source</varname> and
                <varname>-Dandroid.destination</varname> or equivalent configuration in the pom.xml file. The optional 
                parameter <varname>-Dandroid.device</varname> with a explicit value of for a device or emulator name
                or simply <varname>usb</varname> or <varname>emulator</varname> can be used to copy to a specific device.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:push</term>

          <listitem>
            <para>The pull goal can be used to copy files or directories to
            the device. The same configuration parameters as for the <varname>pull</varname> goal can be used.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:undeploy</term>

          <listitem>
            <para>The undeploy goal removes the apk of the current project, or
            another specified apk, from the connected device.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>
</chapter>
